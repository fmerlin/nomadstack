- hosts: servers
  become: True
  tasks:
    - name: Check that the vault.key exists
      stat: path=/etc/vault.key
      register: stat_result
    - block:
      - name: add user vault
        user: name=vault group=docker
      - name: create directories
        file: path=/var/lib/vault state=directory mode=0777 owner=vault group=docker
      - name: get vault
        unarchive: src="{{vault.url}}/{{vault.file}}" dest=/usr/local/bin/ mode=0755 remote_src=yes
      - name: copy systemd unit
        copy: src="../../resources/etc/systemd/system/vault.service" dest=/etc/systemd/system/vault.service mode=0755 owner=vault group=docker
      - name: create fake unseal script
        copy: content="" dest=/usr/local/bin/vault_unseal mode=700 owner=vault
      - name: get consul key
        read_file: src="/etc/consul.key"
        register: _consul_key
      - name: copy vault json
        template: src="../../resources/etc/vault.json" dest=/etc/vault.json mode=0755 owner=vault group=docker
      - name: start vault
        systemd: name=vault state=started daemon_reload=yes enabled=yes
      - name: init vault
        uri:
          url: "http://127.0.0.1:{{vault.port}}/v1/sys/init"
          method: PUT
          return_content: yes
          body_format: json
          body:
            secret_shares: 1
            secret_threshold: 1
        register: _vault
        until: _vault.status == 200
        retries: 30
        delay: 5
      - name: save root token
        copy: content="{{_vault.json.root_token}}" dest=/etc/vault.key mode=0640 group=docker
      - name: create real unseal script
        copy: content="sleep 1 && vault operator unseal -address=http://localhost:{{vault.port}} {{_vault.json.keys_base64[0]}}" dest=/usr/local/bin/vault_unseal mode=0700 owner=vault
      - name: unseal vault
        command: "sudo /usr/local/bin/vault_unseal"
      - name: Set VAULT_TOKEN
        lineinfile:
          path: /etc/environment.d/docker
          state: present
          regexp: 'VAULT_TOKEN'
          line: 'export VAULT_TOKEN={{_vault.json.root_token}}'
      - name: Set VAULT_AGENT_ADDR
        lineinfile:
          path: /etc/environment
          state: present
          regexp: 'VAULT_AGENT_ADDR'
          line: 'VAULT_AGENT_ADDR=http://127.0.0.1:{{vault.port}}'
      - name: install python vault
        pip: name=hvac
      - name: configure vault
        shell: "{{ item }}"
        with_items:
          - "vault auth enable userpass"
          - "vault write auth/userpass/users/{{vault.user}} password={{vault.password}} policies=admins"
          - "vault secrets enable consul"
          - "vault secrets enable -version=2 -path=secret kv"
          - "vault secrets enable pki"
        environment:
          VAULT_TOKEN: "{{_vault.json.root_token}}"
      when: not stat_result.stat.exists

vault secrets tune -max-lease-ttl=87600h pki/docker
vault write -field certificate pki/docker/root/generate/internal common_name="Docker Root CA" ttl=87600h
vault write pki/docker/roles/server \
    max_ttl=26280h \
    ttl=8760h  \
    allowed_domains=example.com \
    allow_localhost=true \
    allow_ip_sans=true \
    allow_bare_domains=true \
    allow_subdomains=true \
    server_flag=true \
    client_flag=false \
    key_usage=DigitalSignature,KeyEncipherment \
    ou="Docker Daemon"
vault write pki/docker/roles/client \
    max_ttl=8760h \
    ttl=720h  \
    allow_any_name=true \
    enforce_hostnames=false \
    server_flag=false \
    client_flag=true \
    key_usage=DigitalSignature \
    ou="Docker Client" \
    no_store=true
vault write pki/docker/issue/server \
  common_name=example.com \
  alt_names=localhost \
  ip_sans="127.0.0.1"\
  ttl=8760h
