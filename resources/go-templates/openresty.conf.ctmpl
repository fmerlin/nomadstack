{{- $openresty := or (env "NGINX") "/openresty" -}}
{{- $server_name := or (env "SERVER") "www" }}
worker_processes  1;
error_log  stderr warn;
pid        /usr/local/openresty/nginx/logs/nginx.pid;
events {
    worker_connections  1024;
}
env OAUTH;
env REDIS;
env RIAK;
env CONSUL;
env FLUENTD;
env NOMAD;
env NOMAD_DC;
env VAULT_TOKEN;
env NOMAD_TOKEN;
http {
{{ range $v, $p1 := tree (print $openresty "/geo/") | byKey -}}
geo ${{ $v }} {
{{- range $k, $p2 := tree (print $openresty "/geo/" $v "/") | explode -}}
{{- range $ip := (print $p2 | split ",") }}
    {{ $ip }} {{ $k }};
{{- end -}}
{{- end }}
}
{{- end }}
    resolver localhost;
#    lua_code_cache off;
    lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/site/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua"; # Include Lua libraries
    lua_shared_dict rp_cache 10M;
    init_worker_by_lua_file '/usr/local/openresty/lualib/rp/directives/init_worker.lua';
    log_by_lua_file '/usr/local/openresty/lualib/rp/directives/log.lua';
    header_filter_by_lua_file '/usr/local/openresty/lualib/rp/directives/header_filter.lua';
    body_filter_by_lua_file '/usr/local/openresty/lualib/rp/directives/body_filter.lua';
    proxy_cache_path /proxy_cache levels=1:2 keys_zone=proxy_cache:10m max_size=10g inactive=60m use_temp_path=off;
    uwsgi_cache_path /uwsgi_cache levels=1:2 keys_zone=uwsgi_cache:10m max_size=10g inactive=60m use_temp_path=off;
    include       mime.types;
    default_type  application/octet-stream;
    access_log  off;
    client_max_body_size 2000M;
    sendfile        on;
    keepalive_timeout  65;

    server {
        server_name {{ $server_name }};
    {{ if ne (env "NOMAD_HOST_PORT_http") "" }}
        listen {{ env "NOMAD_HOST_PORT_http" }};
    {{ else }}
        listen {{ env "NOMAD_HOST_PORT_https" }} ssl;
        ssl_certificate {{ $server_name }}.crt;
        ssl_certificate_key {{ $server_name }}.key;
    {{ end }}
    {{ range $key, $pairs := tree (print $openresty "/endpoints/") | byKey -}}
    {{- $type := (keyOrDefault  (print $openresty "/endpoints/" $key "/type") "") -}}
    {{- $service := (keyOrDefault  (print $openresty "/endpoints/" $key "/service") "") -}}
        location /{{ $key }}/ {
        set $endpoint "{{ $key }}";
        set $proxy_to "";
        set $x_request_id "";
        set $service "{{ $service }}";
        {{- if (eq $type "proxy") }}
            proxy_cache_revalidate on;
            proxy_cache proxy_cache;
            proxy_cache_key $request_uri;
            access_by_lua_file "/usr/local/openresty/lualib/rp/directives/access_service.lua";
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Request-ID $x_request_id;
            proxy_pass http://$proxy_to$request_uri;
        {{- end -}}
        {{- if (eq $type "uwsgi") }}
            include uwsgi_params;
            uwsgi_cache_revalidate on;
            uwsgi_cache uwsgi_cache;
            uwsgi_cache_key $request_uri;
            access_by_lua_file "/usr/local/openresty/lualib/rp/directives/access_service.lua";
            uwsgi_param X_REQUEST_ID $x_request_id;
            uwsgi_pass $proxy_to;
        {{- end -}}
        {{- if (eq $type "grpc") -}}
            access_by_lua_file "/usr/local/openresty/lualib/rp/directives/access_service.lua";
            grpc_bind $remote_addr transparent;
            grpc_set_header Upgrade $http_upgrade;
            grpc_set_header Connection "upgrade";
            grpc_set_header Host $proxy_host;
            grpc_set_header X-Forwarded-For $remote_addr;
            grpc_set_header X-Request-ID $x_request_id;
            grpc_pass grpc://$proxy_to;
        {{- end -}}
        {{- if (eq $type "file") -}}
            access_by_lua_file "/usr/local/openresty/lualib/rp/directives/access_service.lua";
            root $proxy_to;
        {{- end -}}
        {{- if (eq $type "redis") -}}
            lua_check_client_abort on;
            content_by_lua_file "/usr/local/openresty/lualib/rp/directives/content_redis.lua";
        {{- end }}
        {{- if (eq $type "fluentd") -}}
            limit_except POST {
               deny all;
            }
            content_by_lua_file '/usr/local/openresty/lualib/rp/directives/content_fluentd.lua';
        {{- end }}
        }
    {{- end }}
        location /status {
            set $service "";
            add_header Content-Type text/plain;
            return 200 "OK";
        }
        location /signin {
            set $service "";
            access_by_lua_file "/usr/local/openresty/lualib/rp/directives/access_signin.lua";
        }
        location /metrics {
            set $service "";
            content_by_lua_file '/usr/local/openresty/lualib/rp/directives/content_metrics.lua';
        }
        location /swagger.json {
            set $service "";
            content_by_lua_file '/usr/local/openresty/lualib/rp/directives/content_swagger.lua';
        }
#        location /artifacts {
#            create_full_put_path on;
#            autoindex on;
#            autoindex_exact_size off;
#            autoindex_localtime on;
#            charset utf-8;
#
#            dav_methods PUT DELETE MKCOL COPY MOVE;
#            dav_ext_methods PROPFIND OPTIONS;
#            dav_access user:rw group:rw all:rw;
#
#            auth_basic "Restricted";
#            auth_basic_user_file /etc/nginx/htpasswd;
#
#            root /artifacts;
#        }
    }
}
stream {
{{ range $port, $name := tree (print $openresty "/tcp/") | byKey -}}
    upstream {{$name}} {
        set $service "{{ $name }}";
        zone tcp-{{$name}} 64k;
        balancer_by_lua_file '/usr/local/openresty/lualib/rp/directives/balancer_tcp.lua';
    }
    server {
        listen {{ $port }};
        proxy_pass {{$name}};
        proxy_connect_timeout 1s;
    }
{{end}}
}
